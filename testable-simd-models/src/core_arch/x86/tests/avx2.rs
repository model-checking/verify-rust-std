use super::types::*;
use super::upstream;
use crate::abstractions::bitvec::BitVec;
use crate::helpers::test::HasRandom;

/// Derives tests for a given intrinsics. Test that a given intrinsics and its model compute the same thing over random values (1000 by default).
macro_rules! mk {
    ($([$N:literal])?$name:ident$({$(<$($c:literal),*>),*})?($($x:ident : $ty:ident),*)) => {
        #[test]
        fn $name() {
            #[allow(unused)]
            const N: usize = {
                let n: usize = 1000;
                $(let n: usize = $N;)?
                    n
            };
            mk!(@[N]$name$($(<$($c),*>)*)?($($x : $ty),*));
        }
    };
    (@[$N:ident]$name:ident$(<$($c:literal),*>)?($($x:ident : $ty:ident),*)) => {
        for _ in 0..$N {
            $(let $x = $ty::random();)*
                assert_eq!(super::super::models::avx2::$name$(::<$($c,)*>)?($($x.into(),)*), unsafe {
                    BitVec::from(upstream::$name$(::<$($c,)*>)?($($x.into(),)*)).into()
                });
        }
    };
    (@[$N:ident]$name:ident<$($c1:literal),*>$(<$($c:literal),*>)*($($x:ident : $ty:ident),*)) => {
        let one = || {
            mk!(@[$N]$name<$($c1),*>($($x : $ty),*));
        };
        one();
        mk!(@[$N]$name$(<$($c),*>)*($($x : $ty),*));
    }
}

mk!(_mm256_abs_epi32(a: BitVec));
mk!(_mm256_abs_epi16(a: BitVec));
mk!(_mm256_abs_epi8(a: BitVec));
mk!(_mm256_add_epi64(a: BitVec, b: BitVec));
mk!(_mm256_add_epi32(a: BitVec, b: BitVec));
mk!(_mm256_add_epi16(a: BitVec, b: BitVec));
mk!(_mm256_add_epi8(a: BitVec, b: BitVec));
mk!(_mm256_adds_epi8(a: BitVec, b: BitVec));
mk!(_mm256_adds_epi16(a: BitVec, b: BitVec));
mk!(_mm256_adds_epu8(a: BitVec, b: BitVec));
mk!(_mm256_adds_epu16(a: BitVec, b: BitVec));
mk!([100]_mm256_alignr_epi8{<0>,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<14>,<15>,<16>,<17>,<18>,<19>,<20>,<21>,<22>,<23>,<24>,<25>,<26>,<27>,<28>,<29>,<30>,<31>,<32>,<33>,<34>,<35>,<36>,<37>,<38>,<39>,<40>,<41>,<42>,<43>,<44>,<45>,<46>,<47>,<48>,<49>,<50>,<51>,<52>,<53>,<54>,<55>,<56>,<57>,<58>,<59>,<60>,<61>,<62>,<63>,<64>,<65>,<66>,<67>,<68>,<69>,<70>,<71>,<72>,<73>,<74>,<75>,<76>,<77>,<78>,<79>,<80>,<81>,<82>,<83>,<84>,<85>,<86>,<87>,<88>,<89>,<90>,<91>,<92>,<93>,<94>,<95>,<96>,<97>,<98>,<99>,<100>,<101>,<102>,<103>,<104>,<105>,<106>,<107>,<108>,<109>,<110>,<111>,<112>,<113>,<114>,<115>,<116>,<117>,<118>,<119>,<120>,<121>,<122>,<123>,<124>,<125>,<126>,<127>,<128>,<129>,<130>,<131>,<132>,<133>,<134>,<135>,<136>,<137>,<138>,<139>,<140>,<141>,<142>,<143>,<144>,<145>,<146>,<147>,<148>,<149>,<150>,<151>,<152>,<153>,<154>,<155>,<156>,<157>,<158>,<159>,<160>,<161>,<162>,<163>,<164>,<165>,<166>,<167>,<168>,<169>,<170>,<171>,<172>,<173>,<174>,<175>,<176>,<177>,<178>,<179>,<180>,<181>,<182>,<183>,<184>,<185>,<186>,<187>,<188>,<189>,<190>,<191>,<192>,<193>,<194>,<195>,<196>,<197>,<198>,<199>,<200>,<201>,<202>,<203>,<204>,<205>,<206>,<207>,<208>,<209>,<210>,<211>,<212>,<213>,<214>,<215>,<216>,<217>,<218>,<219>,<220>,<221>,<222>,<223>,<224>,<225>,<226>,<227>,<228>,<229>,<230>,<231>,<232>,<233>,<234>,<235>,<236>,<237>,<238>,<239>,<240>,<241>,<242>,<243>,<244>,<245>,<246>,<247>,<248>,<249>,<250>,<251>,<252>,<253>,<254>,<255>}(a: BitVec, b: BitVec));
mk!([100]_mm256_permute2x128_si256{<0>,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<14>,<15>,<16>,<17>,<18>,<19>,<20>,<21>,<22>,<23>,<24>,<25>,<26>,<27>,<28>,<29>,<30>,<31>,<32>,<33>,<34>,<35>,<36>,<37>,<38>,<39>,<40>,<41>,<42>,<43>,<44>,<45>,<46>,<47>,<48>,<49>,<50>,<51>,<52>,<53>,<54>,<55>,<56>,<57>,<58>,<59>,<60>,<61>,<62>,<63>,<64>,<65>,<66>,<67>,<68>,<69>,<70>,<71>,<72>,<73>,<74>,<75>,<76>,<77>,<78>,<79>,<80>,<81>,<82>,<83>,<84>,<85>,<86>,<87>,<88>,<89>,<90>,<91>,<92>,<93>,<94>,<95>,<96>,<97>,<98>,<99>,<100>,<101>,<102>,<103>,<104>,<105>,<106>,<107>,<108>,<109>,<110>,<111>,<112>,<113>,<114>,<115>,<116>,<117>,<118>,<119>,<120>,<121>,<122>,<123>,<124>,<125>,<126>,<127>,<128>,<129>,<130>,<131>,<132>,<133>,<134>,<135>,<136>,<137>,<138>,<139>,<140>,<141>,<142>,<143>,<144>,<145>,<146>,<147>,<148>,<149>,<150>,<151>,<152>,<153>,<154>,<155>,<156>,<157>,<158>,<159>,<160>,<161>,<162>,<163>,<164>,<165>,<166>,<167>,<168>,<169>,<170>,<171>,<172>,<173>,<174>,<175>,<176>,<177>,<178>,<179>,<180>,<181>,<182>,<183>,<184>,<185>,<186>,<187>,<188>,<189>,<190>,<191>,<192>,<193>,<194>,<195>,<196>,<197>,<198>,<199>,<200>,<201>,<202>,<203>,<204>,<205>,<206>,<207>,<208>,<209>,<210>,<211>,<212>,<213>,<214>,<215>,<216>,<217>,<218>,<219>,<220>,<221>,<222>,<223>,<224>,<225>,<226>,<227>,<228>,<229>,<230>,<231>,<232>,<233>,<234>,<235>,<236>,<237>,<238>,<239>,<240>,<241>,<242>,<243>,<244>,<245>,<246>,<247>,<248>,<249>,<250>,<251>,<252>,<253>,<254>,<255>}(a: BitVec, b: BitVec));
mk!(_mm256_blendv_epi8(a: BitVec, b: BitVec, mask: BitVec));
mk!(_mm_broadcastb_epi8(a: BitVec));
mk!(_mm256_broadcastb_epi8(a: BitVec));
mk!(_mm_broadcastd_epi32(a: BitVec));
mk!(_mm256_broadcastd_epi32(a: BitVec));
mk!(_mm_broadcastq_epi64(a: BitVec));
mk!(_mm256_broadcastq_epi64(a: BitVec));
mk!(_mm_broadcastsi128_si256(a: BitVec));
mk!(_mm256_broadcastsi128_si256(a: BitVec));
mk!(_mm_broadcastw_epi16(a: BitVec));
mk!(_mm256_broadcastw_epi16(a: BitVec));
mk!(_mm256_cmpeq_epi64(a: BitVec, b: BitVec));
mk!(_mm256_cmpeq_epi32(a: BitVec, b: BitVec));
mk!(_mm256_cmpeq_epi16(a: BitVec, b: BitVec));
mk!(_mm256_cmpeq_epi8(a: BitVec, b: BitVec));
mk!(_mm256_cmpgt_epi64(a: BitVec, b: BitVec));
mk!(_mm256_cmpgt_epi32(a: BitVec, b: BitVec));
mk!(_mm256_cmpgt_epi16(a: BitVec, b: BitVec));
mk!(_mm256_cmpgt_epi8(a: BitVec, b: BitVec));
mk!(_mm256_cvtepi16_epi32(a: BitVec));
mk!(_mm256_cvtepi16_epi64(a: BitVec));
mk!(_mm256_cvtepi32_epi64(a: BitVec));
mk!(_mm256_cvtepi8_epi16(a: BitVec));
mk!(_mm256_cvtepi8_epi32(a: BitVec));
mk!(_mm256_cvtepi8_epi64(a: BitVec));
mk!(_mm256_cvtepu16_epi32(a: BitVec));
mk!(_mm256_cvtepu16_epi64(a: BitVec));
mk!(_mm256_cvtepu32_epi64(a: BitVec));
mk!(_mm256_cvtepu8_epi16(a: BitVec));
mk!(_mm256_cvtepu8_epi32(a: BitVec));
mk!(_mm256_cvtepu8_epi64(a: BitVec));
mk!(_mm256_extracti128_si256{<0>,<1>}(a: BitVec));
mk!(_mm256_hadd_epi16(a: BitVec, b: BitVec));
mk!(_mm256_hadd_epi32(a: BitVec, b: BitVec));
mk!(_mm256_hsub_epi16(a: BitVec, b: BitVec));
mk!(_mm256_hsub_epi32(a: BitVec, b: BitVec));
mk!(_mm256_hsubs_epi16(a: BitVec, b: BitVec));
mk!(_mm256_inserti128_si256{<0>,<1>}(a: BitVec, b: BitVec));
mk!(_mm256_madd_epi16(a: BitVec, b: BitVec));
mk!(_mm256_maddubs_epi16(a: BitVec, b: BitVec));
mk!(_mm256_max_epi16(a: BitVec, b: BitVec));
mk!(_mm256_max_epi32(a: BitVec, b: BitVec));
mk!(_mm256_max_epi8(a: BitVec, b: BitVec));
mk!(_mm256_max_epu16(a: BitVec, b: BitVec));
mk!(_mm256_max_epu32(a: BitVec, b: BitVec));
mk!(_mm256_max_epu8(a: BitVec, b: BitVec));
mk!(_mm256_min_epi16(a: BitVec, b: BitVec));
mk!(_mm256_min_epi32(a: BitVec, b: BitVec));
mk!(_mm256_min_epi8(a: BitVec, b: BitVec));
mk!(_mm256_min_epu16(a: BitVec, b: BitVec));
mk!(_mm256_min_epu32(a: BitVec, b: BitVec));
mk!(_mm256_min_epu8(a: BitVec, b: BitVec));
mk!(_mm256_mul_epi32(a: BitVec, b: BitVec));
mk!(_mm256_mul_epu32(a: BitVec, b: BitVec));
mk!(_mm256_mulhi_epi16(a: BitVec, b: BitVec));
mk!(_mm256_mulhi_epu16(a: BitVec, b: BitVec));
mk!(_mm256_mullo_epi16(a: BitVec, b: BitVec));
mk!(_mm256_mullo_epi32(a: BitVec, b: BitVec));
mk!(_mm256_mulhrs_epi16(a: BitVec, b: BitVec));
mk!(_mm256_or_si256(a: BitVec, b: BitVec));
mk!(_mm256_packs_epi16(a: BitVec, b: BitVec));
mk!(_mm256_packs_epi32(a: BitVec, b: BitVec));
mk!(_mm256_packus_epi16(a: BitVec, b: BitVec));
mk!(_mm256_packus_epi32(a: BitVec, b: BitVec));
mk!(_mm256_permutevar8x32_epi32(a: BitVec, b: BitVec));
#[test]
fn _mm256_movemask_epi8() {
    let n = 1000;

    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_movemask_epi8(a.into()),
            unsafe { upstream::_mm256_movemask_epi8(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
}
mk!([100]_mm256_mpsadbw_epu8{<0>,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<14>,<15>,<16>,<17>,<18>,<19>,<20>,<21>,<22>,<23>,<24>,<25>,<26>,<27>,<28>,<29>,<30>,<31>,<32>,<33>,<34>,<35>,<36>,<37>,<38>,<39>,<40>,<41>,<42>,<43>,<44>,<45>,<46>,<47>,<48>,<49>,<50>,<51>,<52>,<53>,<54>,<55>,<56>,<57>,<58>,<59>,<60>,<61>,<62>,<63>,<64>,<65>,<66>,<67>,<68>,<69>,<70>,<71>,<72>,<73>,<74>,<75>,<76>,<77>,<78>,<79>,<80>,<81>,<82>,<83>,<84>,<85>,<86>,<87>,<88>,<89>,<90>,<91>,<92>,<93>,<94>,<95>,<96>,<97>,<98>,<99>,<100>,<101>,<102>,<103>,<104>,<105>,<106>,<107>,<108>,<109>,<110>,<111>,<112>,<113>,<114>,<115>,<116>,<117>,<118>,<119>,<120>,<121>,<122>,<123>,<124>,<125>,<126>,<127>,<128>,<129>,<130>,<131>,<132>,<133>,<134>,<135>,<136>,<137>,<138>,<139>,<140>,<141>,<142>,<143>,<144>,<145>,<146>,<147>,<148>,<149>,<150>,<151>,<152>,<153>,<154>,<155>,<156>,<157>,<158>,<159>,<160>,<161>,<162>,<163>,<164>,<165>,<166>,<167>,<168>,<169>,<170>,<171>,<172>,<173>,<174>,<175>,<176>,<177>,<178>,<179>,<180>,<181>,<182>,<183>,<184>,<185>,<186>,<187>,<188>,<189>,<190>,<191>,<192>,<193>,<194>,<195>,<196>,<197>,<198>,<199>,<200>,<201>,<202>,<203>,<204>,<205>,<206>,<207>,<208>,<209>,<210>,<211>,<212>,<213>,<214>,<215>,<216>,<217>,<218>,<219>,<220>,<221>,<222>,<223>,<224>,<225>,<226>,<227>,<228>,<229>,<230>,<231>,<232>,<233>,<234>,<235>,<236>,<237>,<238>,<239>,<240>,<241>,<242>,<243>,<244>,<245>,<246>,<247>,<248>,<249>,<250>,<251>,<252>,<253>,<254>,<255>}(a: BitVec, b: BitVec));

mk!([100]_mm256_permute4x64_epi64{<0>,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<14>,<15>,<16>,<17>,<18>,<19>,<20>,<21>,<22>,<23>,<24>,<25>,<26>,<27>,<28>,<29>,<30>,<31>,<32>,<33>,<34>,<35>,<36>,<37>,<38>,<39>,<40>,<41>,<42>,<43>,<44>,<45>,<46>,<47>,<48>,<49>,<50>,<51>,<52>,<53>,<54>,<55>,<56>,<57>,<58>,<59>,<60>,<61>,<62>,<63>,<64>,<65>,<66>,<67>,<68>,<69>,<70>,<71>,<72>,<73>,<74>,<75>,<76>,<77>,<78>,<79>,<80>,<81>,<82>,<83>,<84>,<85>,<86>,<87>,<88>,<89>,<90>,<91>,<92>,<93>,<94>,<95>,<96>,<97>,<98>,<99>,<100>,<101>,<102>,<103>,<104>,<105>,<106>,<107>,<108>,<109>,<110>,<111>,<112>,<113>,<114>,<115>,<116>,<117>,<118>,<119>,<120>,<121>,<122>,<123>,<124>,<125>,<126>,<127>,<128>,<129>,<130>,<131>,<132>,<133>,<134>,<135>,<136>,<137>,<138>,<139>,<140>,<141>,<142>,<143>,<144>,<145>,<146>,<147>,<148>,<149>,<150>,<151>,<152>,<153>,<154>,<155>,<156>,<157>,<158>,<159>,<160>,<161>,<162>,<163>,<164>,<165>,<166>,<167>,<168>,<169>,<170>,<171>,<172>,<173>,<174>,<175>,<176>,<177>,<178>,<179>,<180>,<181>,<182>,<183>,<184>,<185>,<186>,<187>,<188>,<189>,<190>,<191>,<192>,<193>,<194>,<195>,<196>,<197>,<198>,<199>,<200>,<201>,<202>,<203>,<204>,<205>,<206>,<207>,<208>,<209>,<210>,<211>,<212>,<213>,<214>,<215>,<216>,<217>,<218>,<219>,<220>,<221>,<222>,<223>,<224>,<225>,<226>,<227>,<228>,<229>,<230>,<231>,<232>,<233>,<234>,<235>,<236>,<237>,<238>,<239>,<240>,<241>,<242>,<243>,<244>,<245>,<246>,<247>,<248>,<249>,<250>,<251>,<252>,<253>,<254>,<255>}(a: BitVec));
mk!([100]_mm256_shuffle_epi32{<0>,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<14>,<15>,<16>,<17>,<18>,<19>,<20>,<21>,<22>,<23>,<24>,<25>,<26>,<27>,<28>,<29>,<30>,<31>,<32>,<33>,<34>,<35>,<36>,<37>,<38>,<39>,<40>,<41>,<42>,<43>,<44>,<45>,<46>,<47>,<48>,<49>,<50>,<51>,<52>,<53>,<54>,<55>,<56>,<57>,<58>,<59>,<60>,<61>,<62>,<63>,<64>,<65>,<66>,<67>,<68>,<69>,<70>,<71>,<72>,<73>,<74>,<75>,<76>,<77>,<78>,<79>,<80>,<81>,<82>,<83>,<84>,<85>,<86>,<87>,<88>,<89>,<90>,<91>,<92>,<93>,<94>,<95>,<96>,<97>,<98>,<99>,<100>,<101>,<102>,<103>,<104>,<105>,<106>,<107>,<108>,<109>,<110>,<111>,<112>,<113>,<114>,<115>,<116>,<117>,<118>,<119>,<120>,<121>,<122>,<123>,<124>,<125>,<126>,<127>,<128>,<129>,<130>,<131>,<132>,<133>,<134>,<135>,<136>,<137>,<138>,<139>,<140>,<141>,<142>,<143>,<144>,<145>,<146>,<147>,<148>,<149>,<150>,<151>,<152>,<153>,<154>,<155>,<156>,<157>,<158>,<159>,<160>,<161>,<162>,<163>,<164>,<165>,<166>,<167>,<168>,<169>,<170>,<171>,<172>,<173>,<174>,<175>,<176>,<177>,<178>,<179>,<180>,<181>,<182>,<183>,<184>,<185>,<186>,<187>,<188>,<189>,<190>,<191>,<192>,<193>,<194>,<195>,<196>,<197>,<198>,<199>,<200>,<201>,<202>,<203>,<204>,<205>,<206>,<207>,<208>,<209>,<210>,<211>,<212>,<213>,<214>,<215>,<216>,<217>,<218>,<219>,<220>,<221>,<222>,<223>,<224>,<225>,<226>,<227>,<228>,<229>,<230>,<231>,<232>,<233>,<234>,<235>,<236>,<237>,<238>,<239>,<240>,<241>,<242>,<243>,<244>,<245>,<246>,<247>,<248>,<249>,<250>,<251>,<252>,<253>,<254>,<255>}(a: BitVec));
mk!([100]_mm256_shufflehi_epi16{<0>,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<14>,<15>,<16>,<17>,<18>,<19>,<20>,<21>,<22>,<23>,<24>,<25>,<26>,<27>,<28>,<29>,<30>,<31>,<32>,<33>,<34>,<35>,<36>,<37>,<38>,<39>,<40>,<41>,<42>,<43>,<44>,<45>,<46>,<47>,<48>,<49>,<50>,<51>,<52>,<53>,<54>,<55>,<56>,<57>,<58>,<59>,<60>,<61>,<62>,<63>,<64>,<65>,<66>,<67>,<68>,<69>,<70>,<71>,<72>,<73>,<74>,<75>,<76>,<77>,<78>,<79>,<80>,<81>,<82>,<83>,<84>,<85>,<86>,<87>,<88>,<89>,<90>,<91>,<92>,<93>,<94>,<95>,<96>,<97>,<98>,<99>,<100>,<101>,<102>,<103>,<104>,<105>,<106>,<107>,<108>,<109>,<110>,<111>,<112>,<113>,<114>,<115>,<116>,<117>,<118>,<119>,<120>,<121>,<122>,<123>,<124>,<125>,<126>,<127>,<128>,<129>,<130>,<131>,<132>,<133>,<134>,<135>,<136>,<137>,<138>,<139>,<140>,<141>,<142>,<143>,<144>,<145>,<146>,<147>,<148>,<149>,<150>,<151>,<152>,<153>,<154>,<155>,<156>,<157>,<158>,<159>,<160>,<161>,<162>,<163>,<164>,<165>,<166>,<167>,<168>,<169>,<170>,<171>,<172>,<173>,<174>,<175>,<176>,<177>,<178>,<179>,<180>,<181>,<182>,<183>,<184>,<185>,<186>,<187>,<188>,<189>,<190>,<191>,<192>,<193>,<194>,<195>,<196>,<197>,<198>,<199>,<200>,<201>,<202>,<203>,<204>,<205>,<206>,<207>,<208>,<209>,<210>,<211>,<212>,<213>,<214>,<215>,<216>,<217>,<218>,<219>,<220>,<221>,<222>,<223>,<224>,<225>,<226>,<227>,<228>,<229>,<230>,<231>,<232>,<233>,<234>,<235>,<236>,<237>,<238>,<239>,<240>,<241>,<242>,<243>,<244>,<245>,<246>,<247>,<248>,<249>,<250>,<251>,<252>,<253>,<254>,<255>}(a: BitVec));
mk!([100]_mm256_shufflelo_epi16{<0>,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<14>,<15>,<16>,<17>,<18>,<19>,<20>,<21>,<22>,<23>,<24>,<25>,<26>,<27>,<28>,<29>,<30>,<31>,<32>,<33>,<34>,<35>,<36>,<37>,<38>,<39>,<40>,<41>,<42>,<43>,<44>,<45>,<46>,<47>,<48>,<49>,<50>,<51>,<52>,<53>,<54>,<55>,<56>,<57>,<58>,<59>,<60>,<61>,<62>,<63>,<64>,<65>,<66>,<67>,<68>,<69>,<70>,<71>,<72>,<73>,<74>,<75>,<76>,<77>,<78>,<79>,<80>,<81>,<82>,<83>,<84>,<85>,<86>,<87>,<88>,<89>,<90>,<91>,<92>,<93>,<94>,<95>,<96>,<97>,<98>,<99>,<100>,<101>,<102>,<103>,<104>,<105>,<106>,<107>,<108>,<109>,<110>,<111>,<112>,<113>,<114>,<115>,<116>,<117>,<118>,<119>,<120>,<121>,<122>,<123>,<124>,<125>,<126>,<127>,<128>,<129>,<130>,<131>,<132>,<133>,<134>,<135>,<136>,<137>,<138>,<139>,<140>,<141>,<142>,<143>,<144>,<145>,<146>,<147>,<148>,<149>,<150>,<151>,<152>,<153>,<154>,<155>,<156>,<157>,<158>,<159>,<160>,<161>,<162>,<163>,<164>,<165>,<166>,<167>,<168>,<169>,<170>,<171>,<172>,<173>,<174>,<175>,<176>,<177>,<178>,<179>,<180>,<181>,<182>,<183>,<184>,<185>,<186>,<187>,<188>,<189>,<190>,<191>,<192>,<193>,<194>,<195>,<196>,<197>,<198>,<199>,<200>,<201>,<202>,<203>,<204>,<205>,<206>,<207>,<208>,<209>,<210>,<211>,<212>,<213>,<214>,<215>,<216>,<217>,<218>,<219>,<220>,<221>,<222>,<223>,<224>,<225>,<226>,<227>,<228>,<229>,<230>,<231>,<232>,<233>,<234>,<235>,<236>,<237>,<238>,<239>,<240>,<241>,<242>,<243>,<244>,<245>,<246>,<247>,<248>,<249>,<250>,<251>,<252>,<253>,<254>,<255>}(a: BitVec));
mk!(_mm256_sad_epu8(a: BitVec, b: BitVec));
mk!(_mm256_shuffle_epi8(a: BitVec, b: BitVec));
mk!(_mm256_sign_epi16(a: BitVec, b: BitVec));
mk!(_mm256_sign_epi32(a: BitVec, b: BitVec));
mk!(_mm256_sign_epi8(a: BitVec, b: BitVec));
mk!(_mm256_sll_epi16(a: BitVec, count: BitVec));
mk!(_mm256_sll_epi32(a: BitVec, count: BitVec));
mk!(_mm256_sll_epi64(a: BitVec, count: BitVec));
mk!([100]_mm256_slli_epi16{<0>,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<14>,<15>,<16>,<17>,<18>,<19>,<20>,<21>,<22>,<23>,<24>,<25>,<26>,<27>,<28>,<29>,<30>,<31>,<32>,<33>,<34>,<35>,<36>,<37>,<38>,<39>,<40>,<41>,<42>,<43>,<44>,<45>,<46>,<47>,<48>,<49>,<50>,<51>,<52>,<53>,<54>,<55>,<56>,<57>,<58>,<59>,<60>,<61>,<62>,<63>,<64>,<65>,<66>,<67>,<68>,<69>,<70>,<71>,<72>,<73>,<74>,<75>,<76>,<77>,<78>,<79>,<80>,<81>,<82>,<83>,<84>,<85>,<86>,<87>,<88>,<89>,<90>,<91>,<92>,<93>,<94>,<95>,<96>,<97>,<98>,<99>,<100>,<101>,<102>,<103>,<104>,<105>,<106>,<107>,<108>,<109>,<110>,<111>,<112>,<113>,<114>,<115>,<116>,<117>,<118>,<119>,<120>,<121>,<122>,<123>,<124>,<125>,<126>,<127>,<128>,<129>,<130>,<131>,<132>,<133>,<134>,<135>,<136>,<137>,<138>,<139>,<140>,<141>,<142>,<143>,<144>,<145>,<146>,<147>,<148>,<149>,<150>,<151>,<152>,<153>,<154>,<155>,<156>,<157>,<158>,<159>,<160>,<161>,<162>,<163>,<164>,<165>,<166>,<167>,<168>,<169>,<170>,<171>,<172>,<173>,<174>,<175>,<176>,<177>,<178>,<179>,<180>,<181>,<182>,<183>,<184>,<185>,<186>,<187>,<188>,<189>,<190>,<191>,<192>,<193>,<194>,<195>,<196>,<197>,<198>,<199>,<200>,<201>,<202>,<203>,<204>,<205>,<206>,<207>,<208>,<209>,<210>,<211>,<212>,<213>,<214>,<215>,<216>,<217>,<218>,<219>,<220>,<221>,<222>,<223>,<224>,<225>,<226>,<227>,<228>,<229>,<230>,<231>,<232>,<233>,<234>,<235>,<236>,<237>,<238>,<239>,<240>,<241>,<242>,<243>,<244>,<245>,<246>,<247>,<248>,<249>,<250>,<251>,<252>,<253>,<254>,<255>}(a: BitVec));
mk!([100]_mm256_slli_epi32{<0>,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<14>,<15>,<16>,<17>,<18>,<19>,<20>,<21>,<22>,<23>,<24>,<25>,<26>,<27>,<28>,<29>,<30>,<31>,<32>,<33>,<34>,<35>,<36>,<37>,<38>,<39>,<40>,<41>,<42>,<43>,<44>,<45>,<46>,<47>,<48>,<49>,<50>,<51>,<52>,<53>,<54>,<55>,<56>,<57>,<58>,<59>,<60>,<61>,<62>,<63>,<64>,<65>,<66>,<67>,<68>,<69>,<70>,<71>,<72>,<73>,<74>,<75>,<76>,<77>,<78>,<79>,<80>,<81>,<82>,<83>,<84>,<85>,<86>,<87>,<88>,<89>,<90>,<91>,<92>,<93>,<94>,<95>,<96>,<97>,<98>,<99>,<100>,<101>,<102>,<103>,<104>,<105>,<106>,<107>,<108>,<109>,<110>,<111>,<112>,<113>,<114>,<115>,<116>,<117>,<118>,<119>,<120>,<121>,<122>,<123>,<124>,<125>,<126>,<127>,<128>,<129>,<130>,<131>,<132>,<133>,<134>,<135>,<136>,<137>,<138>,<139>,<140>,<141>,<142>,<143>,<144>,<145>,<146>,<147>,<148>,<149>,<150>,<151>,<152>,<153>,<154>,<155>,<156>,<157>,<158>,<159>,<160>,<161>,<162>,<163>,<164>,<165>,<166>,<167>,<168>,<169>,<170>,<171>,<172>,<173>,<174>,<175>,<176>,<177>,<178>,<179>,<180>,<181>,<182>,<183>,<184>,<185>,<186>,<187>,<188>,<189>,<190>,<191>,<192>,<193>,<194>,<195>,<196>,<197>,<198>,<199>,<200>,<201>,<202>,<203>,<204>,<205>,<206>,<207>,<208>,<209>,<210>,<211>,<212>,<213>,<214>,<215>,<216>,<217>,<218>,<219>,<220>,<221>,<222>,<223>,<224>,<225>,<226>,<227>,<228>,<229>,<230>,<231>,<232>,<233>,<234>,<235>,<236>,<237>,<238>,<239>,<240>,<241>,<242>,<243>,<244>,<245>,<246>,<247>,<248>,<249>,<250>,<251>,<252>,<253>,<254>,<255>}(a: BitVec));
mk!([100]_mm256_slli_epi64{<0>,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<14>,<15>,<16>,<17>,<18>,<19>,<20>,<21>,<22>,<23>,<24>,<25>,<26>,<27>,<28>,<29>,<30>,<31>,<32>,<33>,<34>,<35>,<36>,<37>,<38>,<39>,<40>,<41>,<42>,<43>,<44>,<45>,<46>,<47>,<48>,<49>,<50>,<51>,<52>,<53>,<54>,<55>,<56>,<57>,<58>,<59>,<60>,<61>,<62>,<63>,<64>,<65>,<66>,<67>,<68>,<69>,<70>,<71>,<72>,<73>,<74>,<75>,<76>,<77>,<78>,<79>,<80>,<81>,<82>,<83>,<84>,<85>,<86>,<87>,<88>,<89>,<90>,<91>,<92>,<93>,<94>,<95>,<96>,<97>,<98>,<99>,<100>,<101>,<102>,<103>,<104>,<105>,<106>,<107>,<108>,<109>,<110>,<111>,<112>,<113>,<114>,<115>,<116>,<117>,<118>,<119>,<120>,<121>,<122>,<123>,<124>,<125>,<126>,<127>,<128>,<129>,<130>,<131>,<132>,<133>,<134>,<135>,<136>,<137>,<138>,<139>,<140>,<141>,<142>,<143>,<144>,<145>,<146>,<147>,<148>,<149>,<150>,<151>,<152>,<153>,<154>,<155>,<156>,<157>,<158>,<159>,<160>,<161>,<162>,<163>,<164>,<165>,<166>,<167>,<168>,<169>,<170>,<171>,<172>,<173>,<174>,<175>,<176>,<177>,<178>,<179>,<180>,<181>,<182>,<183>,<184>,<185>,<186>,<187>,<188>,<189>,<190>,<191>,<192>,<193>,<194>,<195>,<196>,<197>,<198>,<199>,<200>,<201>,<202>,<203>,<204>,<205>,<206>,<207>,<208>,<209>,<210>,<211>,<212>,<213>,<214>,<215>,<216>,<217>,<218>,<219>,<220>,<221>,<222>,<223>,<224>,<225>,<226>,<227>,<228>,<229>,<230>,<231>,<232>,<233>,<234>,<235>,<236>,<237>,<238>,<239>,<240>,<241>,<242>,<243>,<244>,<245>,<246>,<247>,<248>,<249>,<250>,<251>,<252>,<253>,<254>,<255>}(a: BitVec));
mk!([100]_mm256_slli_si256{<0>,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<14>,<15>,<16>,<17>,<18>,<19>,<20>,<21>,<22>,<23>,<24>,<25>,<26>,<27>,<28>,<29>,<30>,<31>,<32>,<33>,<34>,<35>,<36>,<37>,<38>,<39>,<40>,<41>,<42>,<43>,<44>,<45>,<46>,<47>,<48>,<49>,<50>,<51>,<52>,<53>,<54>,<55>,<56>,<57>,<58>,<59>,<60>,<61>,<62>,<63>,<64>,<65>,<66>,<67>,<68>,<69>,<70>,<71>,<72>,<73>,<74>,<75>,<76>,<77>,<78>,<79>,<80>,<81>,<82>,<83>,<84>,<85>,<86>,<87>,<88>,<89>,<90>,<91>,<92>,<93>,<94>,<95>,<96>,<97>,<98>,<99>,<100>,<101>,<102>,<103>,<104>,<105>,<106>,<107>,<108>,<109>,<110>,<111>,<112>,<113>,<114>,<115>,<116>,<117>,<118>,<119>,<120>,<121>,<122>,<123>,<124>,<125>,<126>,<127>,<128>,<129>,<130>,<131>,<132>,<133>,<134>,<135>,<136>,<137>,<138>,<139>,<140>,<141>,<142>,<143>,<144>,<145>,<146>,<147>,<148>,<149>,<150>,<151>,<152>,<153>,<154>,<155>,<156>,<157>,<158>,<159>,<160>,<161>,<162>,<163>,<164>,<165>,<166>,<167>,<168>,<169>,<170>,<171>,<172>,<173>,<174>,<175>,<176>,<177>,<178>,<179>,<180>,<181>,<182>,<183>,<184>,<185>,<186>,<187>,<188>,<189>,<190>,<191>,<192>,<193>,<194>,<195>,<196>,<197>,<198>,<199>,<200>,<201>,<202>,<203>,<204>,<205>,<206>,<207>,<208>,<209>,<210>,<211>,<212>,<213>,<214>,<215>,<216>,<217>,<218>,<219>,<220>,<221>,<222>,<223>,<224>,<225>,<226>,<227>,<228>,<229>,<230>,<231>,<232>,<233>,<234>,<235>,<236>,<237>,<238>,<239>,<240>,<241>,<242>,<243>,<244>,<245>,<246>,<247>,<248>,<249>,<250>,<251>,<252>,<253>,<254>,<255>}(a: BitVec));
mk!([100]_mm256_bslli_epi128{<0>,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<14>,<15>,<16>,<17>,<18>,<19>,<20>,<21>,<22>,<23>,<24>,<25>,<26>,<27>,<28>,<29>,<30>,<31>,<32>,<33>,<34>,<35>,<36>,<37>,<38>,<39>,<40>,<41>,<42>,<43>,<44>,<45>,<46>,<47>,<48>,<49>,<50>,<51>,<52>,<53>,<54>,<55>,<56>,<57>,<58>,<59>,<60>,<61>,<62>,<63>,<64>,<65>,<66>,<67>,<68>,<69>,<70>,<71>,<72>,<73>,<74>,<75>,<76>,<77>,<78>,<79>,<80>,<81>,<82>,<83>,<84>,<85>,<86>,<87>,<88>,<89>,<90>,<91>,<92>,<93>,<94>,<95>,<96>,<97>,<98>,<99>,<100>,<101>,<102>,<103>,<104>,<105>,<106>,<107>,<108>,<109>,<110>,<111>,<112>,<113>,<114>,<115>,<116>,<117>,<118>,<119>,<120>,<121>,<122>,<123>,<124>,<125>,<126>,<127>,<128>,<129>,<130>,<131>,<132>,<133>,<134>,<135>,<136>,<137>,<138>,<139>,<140>,<141>,<142>,<143>,<144>,<145>,<146>,<147>,<148>,<149>,<150>,<151>,<152>,<153>,<154>,<155>,<156>,<157>,<158>,<159>,<160>,<161>,<162>,<163>,<164>,<165>,<166>,<167>,<168>,<169>,<170>,<171>,<172>,<173>,<174>,<175>,<176>,<177>,<178>,<179>,<180>,<181>,<182>,<183>,<184>,<185>,<186>,<187>,<188>,<189>,<190>,<191>,<192>,<193>,<194>,<195>,<196>,<197>,<198>,<199>,<200>,<201>,<202>,<203>,<204>,<205>,<206>,<207>,<208>,<209>,<210>,<211>,<212>,<213>,<214>,<215>,<216>,<217>,<218>,<219>,<220>,<221>,<222>,<223>,<224>,<225>,<226>,<227>,<228>,<229>,<230>,<231>,<232>,<233>,<234>,<235>,<236>,<237>,<238>,<239>,<240>,<241>,<242>,<243>,<244>,<245>,<246>,<247>,<248>,<249>,<250>,<251>,<252>,<253>,<254>,<255>}(a: BitVec));
mk!(_mm_sllv_epi32(a: BitVec, count: BitVec));
mk!(_mm256_sllv_epi32(a: BitVec, count: BitVec));
mk!(_mm_sllv_epi64(a: BitVec, count: BitVec));
mk!(_mm256_sllv_epi64(a: BitVec, count: BitVec));
mk!(_mm256_sra_epi16(a: BitVec, count: BitVec));
mk!(_mm256_sra_epi32(a: BitVec, count: BitVec));
mk!([100]_mm256_srai_epi16{<0>,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<14>,<15>,<16>,<17>,<18>,<19>,<20>,<21>,<22>,<23>,<24>,<25>,<26>,<27>,<28>,<29>,<30>,<31>,<32>,<33>,<34>,<35>,<36>,<37>,<38>,<39>,<40>,<41>,<42>,<43>,<44>,<45>,<46>,<47>,<48>,<49>,<50>,<51>,<52>,<53>,<54>,<55>,<56>,<57>,<58>,<59>,<60>,<61>,<62>,<63>,<64>,<65>,<66>,<67>,<68>,<69>,<70>,<71>,<72>,<73>,<74>,<75>,<76>,<77>,<78>,<79>,<80>,<81>,<82>,<83>,<84>,<85>,<86>,<87>,<88>,<89>,<90>,<91>,<92>,<93>,<94>,<95>,<96>,<97>,<98>,<99>,<100>,<101>,<102>,<103>,<104>,<105>,<106>,<107>,<108>,<109>,<110>,<111>,<112>,<113>,<114>,<115>,<116>,<117>,<118>,<119>,<120>,<121>,<122>,<123>,<124>,<125>,<126>,<127>,<128>,<129>,<130>,<131>,<132>,<133>,<134>,<135>,<136>,<137>,<138>,<139>,<140>,<141>,<142>,<143>,<144>,<145>,<146>,<147>,<148>,<149>,<150>,<151>,<152>,<153>,<154>,<155>,<156>,<157>,<158>,<159>,<160>,<161>,<162>,<163>,<164>,<165>,<166>,<167>,<168>,<169>,<170>,<171>,<172>,<173>,<174>,<175>,<176>,<177>,<178>,<179>,<180>,<181>,<182>,<183>,<184>,<185>,<186>,<187>,<188>,<189>,<190>,<191>,<192>,<193>,<194>,<195>,<196>,<197>,<198>,<199>,<200>,<201>,<202>,<203>,<204>,<205>,<206>,<207>,<208>,<209>,<210>,<211>,<212>,<213>,<214>,<215>,<216>,<217>,<218>,<219>,<220>,<221>,<222>,<223>,<224>,<225>,<226>,<227>,<228>,<229>,<230>,<231>,<232>,<233>,<234>,<235>,<236>,<237>,<238>,<239>,<240>,<241>,<242>,<243>,<244>,<245>,<246>,<247>,<248>,<249>,<250>,<251>,<252>,<253>,<254>,<255>}(a: BitVec));
mk!(_mm256_srai_epi32{<0>,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<14>,<15>,<16>,<17>,<18>,<19>,<20>,<21>,<22>,<23>,<24>,<25>,<26>,<27>,<28>,<29>,<30>,<31>,<32>,<33>,<34>,<35>,<36>,<37>,<38>,<39>,<40>,<41>,<42>,<43>,<44>,<45>,<46>,<47>,<48>,<49>,<50>,<51>,<52>,<53>,<54>,<55>,<56>,<57>,<58>,<59>,<60>,<61>,<62>,<63>,<64>,<65>,<66>,<67>,<68>,<69>,<70>,<71>,<72>,<73>,<74>,<75>,<76>,<77>,<78>,<79>,<80>,<81>,<82>,<83>,<84>,<85>,<86>,<87>,<88>,<89>,<90>,<91>,<92>,<93>,<94>,<95>,<96>,<97>,<98>,<99>,<100>,<101>,<102>,<103>,<104>,<105>,<106>,<107>,<108>,<109>,<110>,<111>,<112>,<113>,<114>,<115>,<116>,<117>,<118>,<119>,<120>,<121>,<122>,<123>,<124>,<125>,<126>,<127>,<128>,<129>,<130>,<131>,<132>,<133>,<134>,<135>,<136>,<137>,<138>,<139>,<140>,<141>,<142>,<143>,<144>,<145>,<146>,<147>,<148>,<149>,<150>,<151>,<152>,<153>,<154>,<155>,<156>,<157>,<158>,<159>,<160>,<161>,<162>,<163>,<164>,<165>,<166>,<167>,<168>,<169>,<170>,<171>,<172>,<173>,<174>,<175>,<176>,<177>,<178>,<179>,<180>,<181>,<182>,<183>,<184>,<185>,<186>,<187>,<188>,<189>,<190>,<191>,<192>,<193>,<194>,<195>,<196>,<197>,<198>,<199>,<200>,<201>,<202>,<203>,<204>,<205>,<206>,<207>,<208>,<209>,<210>,<211>,<212>,<213>,<214>,<215>,<216>,<217>,<218>,<219>,<220>,<221>,<222>,<223>,<224>,<225>,<226>,<227>,<228>,<229>,<230>,<231>,<232>,<233>,<234>,<235>,<236>,<237>,<238>,<239>,<240>,<241>,<242>,<243>,<244>,<245>,<246>,<247>,<248>,<249>,<250>,<251>,<252>,<253>,<254>,<255>}(a: BitVec));
mk!(_mm_srav_epi32(a: BitVec, count: BitVec));
mk!(_mm256_srav_epi32(a: BitVec, count: BitVec));
mk!([100]_mm256_srli_si256{<0>,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<14>,<15>,<16>,<17>,<18>,<19>,<20>,<21>,<22>,<23>,<24>,<25>,<26>,<27>,<28>,<29>,<30>,<31>,<32>,<33>,<34>,<35>,<36>,<37>,<38>,<39>,<40>,<41>,<42>,<43>,<44>,<45>,<46>,<47>,<48>,<49>,<50>,<51>,<52>,<53>,<54>,<55>,<56>,<57>,<58>,<59>,<60>,<61>,<62>,<63>,<64>,<65>,<66>,<67>,<68>,<69>,<70>,<71>,<72>,<73>,<74>,<75>,<76>,<77>,<78>,<79>,<80>,<81>,<82>,<83>,<84>,<85>,<86>,<87>,<88>,<89>,<90>,<91>,<92>,<93>,<94>,<95>,<96>,<97>,<98>,<99>,<100>,<101>,<102>,<103>,<104>,<105>,<106>,<107>,<108>,<109>,<110>,<111>,<112>,<113>,<114>,<115>,<116>,<117>,<118>,<119>,<120>,<121>,<122>,<123>,<124>,<125>,<126>,<127>,<128>,<129>,<130>,<131>,<132>,<133>,<134>,<135>,<136>,<137>,<138>,<139>,<140>,<141>,<142>,<143>,<144>,<145>,<146>,<147>,<148>,<149>,<150>,<151>,<152>,<153>,<154>,<155>,<156>,<157>,<158>,<159>,<160>,<161>,<162>,<163>,<164>,<165>,<166>,<167>,<168>,<169>,<170>,<171>,<172>,<173>,<174>,<175>,<176>,<177>,<178>,<179>,<180>,<181>,<182>,<183>,<184>,<185>,<186>,<187>,<188>,<189>,<190>,<191>,<192>,<193>,<194>,<195>,<196>,<197>,<198>,<199>,<200>,<201>,<202>,<203>,<204>,<205>,<206>,<207>,<208>,<209>,<210>,<211>,<212>,<213>,<214>,<215>,<216>,<217>,<218>,<219>,<220>,<221>,<222>,<223>,<224>,<225>,<226>,<227>,<228>,<229>,<230>,<231>,<232>,<233>,<234>,<235>,<236>,<237>,<238>,<239>,<240>,<241>,<242>,<243>,<244>,<245>,<246>,<247>,<248>,<249>,<250>,<251>,<252>,<253>,<254>,<255>}(a: BitVec));
mk!([100]_mm256_bsrli_epi128{<0>,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<14>,<15>,<16>,<17>,<18>,<19>,<20>,<21>,<22>,<23>,<24>,<25>,<26>,<27>,<28>,<29>,<30>,<31>,<32>,<33>,<34>,<35>,<36>,<37>,<38>,<39>,<40>,<41>,<42>,<43>,<44>,<45>,<46>,<47>,<48>,<49>,<50>,<51>,<52>,<53>,<54>,<55>,<56>,<57>,<58>,<59>,<60>,<61>,<62>,<63>,<64>,<65>,<66>,<67>,<68>,<69>,<70>,<71>,<72>,<73>,<74>,<75>,<76>,<77>,<78>,<79>,<80>,<81>,<82>,<83>,<84>,<85>,<86>,<87>,<88>,<89>,<90>,<91>,<92>,<93>,<94>,<95>,<96>,<97>,<98>,<99>,<100>,<101>,<102>,<103>,<104>,<105>,<106>,<107>,<108>,<109>,<110>,<111>,<112>,<113>,<114>,<115>,<116>,<117>,<118>,<119>,<120>,<121>,<122>,<123>,<124>,<125>,<126>,<127>,<128>,<129>,<130>,<131>,<132>,<133>,<134>,<135>,<136>,<137>,<138>,<139>,<140>,<141>,<142>,<143>,<144>,<145>,<146>,<147>,<148>,<149>,<150>,<151>,<152>,<153>,<154>,<155>,<156>,<157>,<158>,<159>,<160>,<161>,<162>,<163>,<164>,<165>,<166>,<167>,<168>,<169>,<170>,<171>,<172>,<173>,<174>,<175>,<176>,<177>,<178>,<179>,<180>,<181>,<182>,<183>,<184>,<185>,<186>,<187>,<188>,<189>,<190>,<191>,<192>,<193>,<194>,<195>,<196>,<197>,<198>,<199>,<200>,<201>,<202>,<203>,<204>,<205>,<206>,<207>,<208>,<209>,<210>,<211>,<212>,<213>,<214>,<215>,<216>,<217>,<218>,<219>,<220>,<221>,<222>,<223>,<224>,<225>,<226>,<227>,<228>,<229>,<230>,<231>,<232>,<233>,<234>,<235>,<236>,<237>,<238>,<239>,<240>,<241>,<242>,<243>,<244>,<245>,<246>,<247>,<248>,<249>,<250>,<251>,<252>,<253>,<254>,<255>}(a: BitVec));
mk!(_mm256_srl_epi16(a: BitVec, count: BitVec));
mk!(_mm256_srl_epi32(a: BitVec, count: BitVec));
mk!(_mm256_srl_epi64(a: BitVec, count: BitVec));
mk!([100]_mm256_srli_epi16{<0>,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<14>,<15>,<16>,<17>,<18>,<19>,<20>,<21>,<22>,<23>,<24>,<25>,<26>,<27>,<28>,<29>,<30>,<31>,<32>,<33>,<34>,<35>,<36>,<37>,<38>,<39>,<40>,<41>,<42>,<43>,<44>,<45>,<46>,<47>,<48>,<49>,<50>,<51>,<52>,<53>,<54>,<55>,<56>,<57>,<58>,<59>,<60>,<61>,<62>,<63>,<64>,<65>,<66>,<67>,<68>,<69>,<70>,<71>,<72>,<73>,<74>,<75>,<76>,<77>,<78>,<79>,<80>,<81>,<82>,<83>,<84>,<85>,<86>,<87>,<88>,<89>,<90>,<91>,<92>,<93>,<94>,<95>,<96>,<97>,<98>,<99>,<100>,<101>,<102>,<103>,<104>,<105>,<106>,<107>,<108>,<109>,<110>,<111>,<112>,<113>,<114>,<115>,<116>,<117>,<118>,<119>,<120>,<121>,<122>,<123>,<124>,<125>,<126>,<127>,<128>,<129>,<130>,<131>,<132>,<133>,<134>,<135>,<136>,<137>,<138>,<139>,<140>,<141>,<142>,<143>,<144>,<145>,<146>,<147>,<148>,<149>,<150>,<151>,<152>,<153>,<154>,<155>,<156>,<157>,<158>,<159>,<160>,<161>,<162>,<163>,<164>,<165>,<166>,<167>,<168>,<169>,<170>,<171>,<172>,<173>,<174>,<175>,<176>,<177>,<178>,<179>,<180>,<181>,<182>,<183>,<184>,<185>,<186>,<187>,<188>,<189>,<190>,<191>,<192>,<193>,<194>,<195>,<196>,<197>,<198>,<199>,<200>,<201>,<202>,<203>,<204>,<205>,<206>,<207>,<208>,<209>,<210>,<211>,<212>,<213>,<214>,<215>,<216>,<217>,<218>,<219>,<220>,<221>,<222>,<223>,<224>,<225>,<226>,<227>,<228>,<229>,<230>,<231>,<232>,<233>,<234>,<235>,<236>,<237>,<238>,<239>,<240>,<241>,<242>,<243>,<244>,<245>,<246>,<247>,<248>,<249>,<250>,<251>,<252>,<253>,<254>,<255>}(a: BitVec));
mk!([100]_mm256_srli_epi32{<0>,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<14>,<15>,<16>,<17>,<18>,<19>,<20>,<21>,<22>,<23>,<24>,<25>,<26>,<27>,<28>,<29>,<30>,<31>,<32>,<33>,<34>,<35>,<36>,<37>,<38>,<39>,<40>,<41>,<42>,<43>,<44>,<45>,<46>,<47>,<48>,<49>,<50>,<51>,<52>,<53>,<54>,<55>,<56>,<57>,<58>,<59>,<60>,<61>,<62>,<63>,<64>,<65>,<66>,<67>,<68>,<69>,<70>,<71>,<72>,<73>,<74>,<75>,<76>,<77>,<78>,<79>,<80>,<81>,<82>,<83>,<84>,<85>,<86>,<87>,<88>,<89>,<90>,<91>,<92>,<93>,<94>,<95>,<96>,<97>,<98>,<99>,<100>,<101>,<102>,<103>,<104>,<105>,<106>,<107>,<108>,<109>,<110>,<111>,<112>,<113>,<114>,<115>,<116>,<117>,<118>,<119>,<120>,<121>,<122>,<123>,<124>,<125>,<126>,<127>,<128>,<129>,<130>,<131>,<132>,<133>,<134>,<135>,<136>,<137>,<138>,<139>,<140>,<141>,<142>,<143>,<144>,<145>,<146>,<147>,<148>,<149>,<150>,<151>,<152>,<153>,<154>,<155>,<156>,<157>,<158>,<159>,<160>,<161>,<162>,<163>,<164>,<165>,<166>,<167>,<168>,<169>,<170>,<171>,<172>,<173>,<174>,<175>,<176>,<177>,<178>,<179>,<180>,<181>,<182>,<183>,<184>,<185>,<186>,<187>,<188>,<189>,<190>,<191>,<192>,<193>,<194>,<195>,<196>,<197>,<198>,<199>,<200>,<201>,<202>,<203>,<204>,<205>,<206>,<207>,<208>,<209>,<210>,<211>,<212>,<213>,<214>,<215>,<216>,<217>,<218>,<219>,<220>,<221>,<222>,<223>,<224>,<225>,<226>,<227>,<228>,<229>,<230>,<231>,<232>,<233>,<234>,<235>,<236>,<237>,<238>,<239>,<240>,<241>,<242>,<243>,<244>,<245>,<246>,<247>,<248>,<249>,<250>,<251>,<252>,<253>,<254>,<255>}(a: BitVec));
mk!([100]_mm256_srli_epi64{<0>,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<14>,<15>,<16>,<17>,<18>,<19>,<20>,<21>,<22>,<23>,<24>,<25>,<26>,<27>,<28>,<29>,<30>,<31>,<32>,<33>,<34>,<35>,<36>,<37>,<38>,<39>,<40>,<41>,<42>,<43>,<44>,<45>,<46>,<47>,<48>,<49>,<50>,<51>,<52>,<53>,<54>,<55>,<56>,<57>,<58>,<59>,<60>,<61>,<62>,<63>,<64>,<65>,<66>,<67>,<68>,<69>,<70>,<71>,<72>,<73>,<74>,<75>,<76>,<77>,<78>,<79>,<80>,<81>,<82>,<83>,<84>,<85>,<86>,<87>,<88>,<89>,<90>,<91>,<92>,<93>,<94>,<95>,<96>,<97>,<98>,<99>,<100>,<101>,<102>,<103>,<104>,<105>,<106>,<107>,<108>,<109>,<110>,<111>,<112>,<113>,<114>,<115>,<116>,<117>,<118>,<119>,<120>,<121>,<122>,<123>,<124>,<125>,<126>,<127>,<128>,<129>,<130>,<131>,<132>,<133>,<134>,<135>,<136>,<137>,<138>,<139>,<140>,<141>,<142>,<143>,<144>,<145>,<146>,<147>,<148>,<149>,<150>,<151>,<152>,<153>,<154>,<155>,<156>,<157>,<158>,<159>,<160>,<161>,<162>,<163>,<164>,<165>,<166>,<167>,<168>,<169>,<170>,<171>,<172>,<173>,<174>,<175>,<176>,<177>,<178>,<179>,<180>,<181>,<182>,<183>,<184>,<185>,<186>,<187>,<188>,<189>,<190>,<191>,<192>,<193>,<194>,<195>,<196>,<197>,<198>,<199>,<200>,<201>,<202>,<203>,<204>,<205>,<206>,<207>,<208>,<209>,<210>,<211>,<212>,<213>,<214>,<215>,<216>,<217>,<218>,<219>,<220>,<221>,<222>,<223>,<224>,<225>,<226>,<227>,<228>,<229>,<230>,<231>,<232>,<233>,<234>,<235>,<236>,<237>,<238>,<239>,<240>,<241>,<242>,<243>,<244>,<245>,<246>,<247>,<248>,<249>,<250>,<251>,<252>,<253>,<254>,<255>}(a: BitVec));
mk!(_mm_srlv_epi32(a: BitVec, count: BitVec));
mk!(_mm256_srlv_epi32(a: BitVec, count: BitVec));
mk!(_mm_srlv_epi64(a: BitVec, count: BitVec));
mk!(_mm256_srlv_epi64(a: BitVec, count: BitVec));
mk!(_mm256_sub_epi16(a: BitVec, b: BitVec));
mk!(_mm256_sub_epi32(a: BitVec, b: BitVec));
mk!(_mm256_sub_epi64(a: BitVec, b: BitVec));
mk!(_mm256_sub_epi8(a: BitVec, b: BitVec));
mk!(_mm256_subs_epi16(a: BitVec, b: BitVec));
mk!(_mm256_subs_epi8(a: BitVec, b: BitVec));
mk!(_mm256_subs_epu16(a: BitVec, b: BitVec));
mk!(_mm256_subs_epu8(a: BitVec, b: BitVec));
mk!(_mm256_unpackhi_epi8(a: BitVec, b: BitVec));
mk!(_mm256_unpacklo_epi8(a: BitVec, b: BitVec));
mk!(_mm256_unpackhi_epi16(a: BitVec, b: BitVec));
mk!(_mm256_unpacklo_epi16(a: BitVec, b: BitVec));
mk!(_mm256_unpackhi_epi32(a: BitVec, b: BitVec));
mk!(_mm256_unpacklo_epi32(a: BitVec, b: BitVec));
mk!(_mm256_unpackhi_epi64(a: BitVec, b: BitVec));
mk!(_mm256_unpacklo_epi64(a: BitVec, b: BitVec));
mk!(_mm256_xor_si256(a: BitVec, b: BitVec));

#[test]
fn _mm256_extract_epi8() {
    let n = 100;

    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<0>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<0>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<1>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<1>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<2>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<2>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<3>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<3>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<4>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<4>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<5>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<5>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<6>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<6>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<7>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<7>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<8>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<8>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<9>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<9>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<10>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<10>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<11>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<11>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<12>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<12>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<13>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<13>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<14>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<14>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<15>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<15>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<16>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<16>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<17>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<17>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<18>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<18>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<19>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<19>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<20>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<20>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<21>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<21>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<22>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<22>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<23>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<23>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<24>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<24>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<25>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<25>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<26>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<26>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<27>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<27>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<28>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<28>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<29>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<29>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<30>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<30>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi8::<31>(a.into()),
            unsafe { upstream::_mm256_extract_epi8::<31>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
}

#[test]
fn _mm256_extract_epi16() {
    let n = 100;

    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi16::<0>(a.into()),
            unsafe { upstream::_mm256_extract_epi16::<0>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi16::<1>(a.into()),
            unsafe { upstream::_mm256_extract_epi16::<1>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi16::<2>(a.into()),
            unsafe { upstream::_mm256_extract_epi16::<2>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi16::<3>(a.into()),
            unsafe { upstream::_mm256_extract_epi16::<3>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi16::<4>(a.into()),
            unsafe { upstream::_mm256_extract_epi16::<4>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi16::<5>(a.into()),
            unsafe { upstream::_mm256_extract_epi16::<5>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi16::<6>(a.into()),
            unsafe { upstream::_mm256_extract_epi16::<6>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi16::<7>(a.into()),
            unsafe { upstream::_mm256_extract_epi16::<7>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi16::<8>(a.into()),
            unsafe { upstream::_mm256_extract_epi16::<8>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi16::<9>(a.into()),
            unsafe { upstream::_mm256_extract_epi16::<9>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi16::<10>(a.into()),
            unsafe { upstream::_mm256_extract_epi16::<10>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi16::<11>(a.into()),
            unsafe { upstream::_mm256_extract_epi16::<11>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi16::<12>(a.into()),
            unsafe { upstream::_mm256_extract_epi16::<12>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi16::<13>(a.into()),
            unsafe { upstream::_mm256_extract_epi16::<13>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi16::<14>(a.into()),
            unsafe { upstream::_mm256_extract_epi16::<14>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
    for _ in 0..n {
        let a: BitVec<256> = BitVec::random();
        assert_eq!(
            super::super::models::avx2::_mm256_extract_epi16::<15>(a.into()),
            unsafe { upstream::_mm256_extract_epi16::<15>(a.into()) },
            "Failed with input value: {:?}",
            a
        );
    }
}

mk!(_mm256_and_si256(a: __m256i, b: __m256i));
mk!(_mm256_andnot_si256(a: __m256i, b: __m256i));
mk!(_mm256_avg_epu16(a: __m256i, b: __m256i));
mk!(_mm256_avg_epu8(a: __m256i, b: __m256i));
mk!(_mm_broadcastsd_pd(a: __m128d));
mk!(_mm256_broadcastsd_pd(a: __m128d));
mk!(_mm_broadcastss_ps(a: __m128));
mk!(_mm256_broadcastss_ps(a: __m128));
