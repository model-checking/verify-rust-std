--- a/crates/core_arch/src/aarch64/neon/mod.rs
+++ b/crates/core_arch/src/aarch64/neon/mod.rs
@@ -2,6 +2,9 @@
 
 #![allow(non_camel_case_types)]
 
+#[cfg(kani)]
+use crate::kani;
+
 #[rustfmt::skip]
 mod generated;
 #[rustfmt::skip]
--- a/crates/core_arch/src/arm_shared/neon/mod.rs
+++ b/crates/core_arch/src/arm_shared/neon/mod.rs
@@ -1,5 +1,8 @@
 //! ARMv7 NEON intrinsics
 
+#[cfg(kani)]
+use crate::kani;
+
 #[rustfmt::skip]
 mod generated;
 #[rustfmt::skip]
--- a/crates/core_arch/src/macros.rs
+++ b/crates/core_arch/src/macros.rs
@@ -128,6 +128,15 @@ macro_rules! types {
             }
         }
 
+        #[cfg(kani)]
+        $(#[$stability])+
+        impl kani::Arbitrary for $name {
+            fn any() -> Self {
+                let data: [$elem_type; $len] = kani::any();
+                Self { 0: data }
+            }
+        }
+
         $(#[$stability])+
         impl crate::fmt::Debug for $name {
             #[inline]
--- a/crates/core_arch/src/x86/mod.rs
+++ b/crates/core_arch/src/x86/mod.rs
@@ -1,5 +1,7 @@
 //! `x86` and `x86_64` intrinsics.
 
+#[cfg(kani)]
+use crate::kani;
 use crate::mem::transmute;
 
 #[macro_use]
