//! ARM compiler specific intrinsics
//!
//! # References
//!
//! - [ARM Compiler v 6.10 - armclang Reference Guide](https://developer.arm.com/docs/100067/0610)

/// This intrinsic inserts a BKPT instruction into the instruction stream generated by the compiler
///
/// It enables you to include a breakpoint instruction in your Rust code
///
/// `val` is a compile-time constant integer whose range is:
///
/// - `0...65535` if you are compiling source as A32 code.
/// - `0...255` if you are compiling source as T32 code.
///
/// **NOTE** Due compiler limitations this function only supports the range `0...255` in A32 mode.
// TODO support the extended range `0...65535` when compiling as A32 code (`cfg(not(target_feature =
// "thumb-mode"))`). T32 mode (`cfg(target_feature = "thumb-mode")`) should continue to support the
// range `0...255`.
#[cfg_attr(test, assert_instr(bkpt))]
#[inline(always)]
#[rustc_args_required_const(0)]
pub unsafe fn __breakpoint(val: i32) {
    macro_rules! call {
        ($imm8:expr) => {
            asm!(concat!("BKPT ", stringify!($imm8)) : : : : "volatile")
        }
    }

    constify_imm8!(val, call);
}
